#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 25 10:36:34 2021

@author: harshittrehan
"""

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
import glob
import numpy as np
from gensim.models import Word2Vec
from sklearn.naive_bayes import GaussianNB

numReal = 1000
M = 22
opdict = {}

realWinSamples = []
realZbotSamples =[]
fakeSamples = []
benignSamples = []

X = []
y = []

def opcodeMapping():
    global opdict
    
    opfreq = {}
    
    with open("obseqWWS.txt", "r") as f:
        for line in f:
            line = line.strip()
            if line not in opfreq:
                opfreq[line] = 1
            else:
                opfreq[line] += 1
    
    tup = sorted(opfreq.items(), key=lambda x:x[1], reverse=True)

    for i in range(0, M-1):
        opdict[tup[i][0]] = i

def fileLen(fileName, size):
    sz = 0
    with open(fileName, "r") as rf:
        for line in rf:
            sz += 1
    if sz>=size:
        return True
    else:
        return False

def loadBenign():
    global benignSamples
    numReal = 100
    files = glob.glob("../DATA/cygwin (opcodes)/*.txt")
    for file in files:
        if fileLen(file, 300):
            if numReal>0:
                with open(file, "r") as rf:
                    currentSample = []
                    for line in rf:
                        if len(currentSample) < 300:
                            line = line.strip()
                            if line in opdict:
                                currentSample.append(opdict[line])
                            else:
                                currentSample.append(M-1)
                        else:
                            break
                    benignSamples.append(currentSample)
            numReal -= 1

def getFakeSamples():
    global fakeSamples
    
    files = glob.glob("fakeSamples/*.txt")
    for file in files:
        with open(file, "r") as rf:
            currentSample = []
            for line in rf:
                line = line.strip()
                currentSample.append(int(line))
            fakeSamples.append(currentSample)
    
def readRealMW():
    global numReal
    global opdict
    global M
    global realWinSamples
    
    files = glob.glob("winwebsec/*.txt")
    for file in files:
        if fileLen(file, 300):
            with open(file, "r") as rf:
                currentSample = []
                for line in rf:
                    line = line.strip()
                    if line in opdict:
                        currentSample.append(opdict[line])
                    else:
                        currentSample.append(M-1)
                realWinSamples.append(currentSample)

def realMWIntVec():
    global realWinSamples
    global opdict
    
    files = glob.glob("../winwebsec/*.txt")
    print(len(files))
    fileNum = 0
    for file in files:
        if fileNum < 1000:
            if fileLen(file, 300):
                with open(file, "r") as rf:
                    fileNum += 1
                    currentSample = []
                    for line in rf:
                        if len(currentSample)<300:
                            line = line.strip()
                            if line in opdict:
                                currentSample.append(opdict[line])
                            else:
                                currentSample.append(M-1)
                        else:
                            break
                    realWinSamples.append(currentSample)
            else:
                continue
        else:
            break

def dataSamples():
    global X, y, opdict
    global realWinSamples, realZbotSamples, fakeSamples
    
    filesWin = glob.glob("wintest/*.txt")
    filesZbot = glob.glob("wintest/*.txt")
    filesFake = glob.glob("fakeSamples/*.txt")
    
    for file in filesWin:
        with open(file, "r") as f:
            currentSample = []
            for line in f:
                if len(currentSample) < 300:
                    line = line.strip()
                    if line in opdict:
                        currentSample.append(opdict[line])
                    else:
                        currentSample.append(M-1)
                else:
                    break
            realWinSamples.append(currentSample)
    
    for file in filesZbot:
        with open(file, "r") as f:
            currentSample = []
            for line in f:
                if len(currentSample) < 300:
                    line = line.strip()
                    if line in opdict:
                        currentSample.append(opdict[line])
                    else:
                        currentSample.append(M-1)
                else:
                    break
            realZbotSamples.append(currentSample)
            
    for file in filesFake:
        with open(file, "r") as rf:
            currentSample = []
            for line in rf:
                line = line.strip()
                currentSample.append(int(line))
            fakeSamples.append(currentSample)
    
    X = realWinSamples + benignSamples + fakeSamples
    y = [0]*100 + [1]*100 + [2]*100

def testRunner():
    global realWinSamples, fakeSamples, X, y
    
    
    X = realWinSamples + fakeSamples
    y = [0]*1000 + [1]*100
    
    trainX, testX, trainy, testy = train_test_split(X, y, test_size=0.2, shuffle=True)

    for c in range(1, 15):
        for deg in range(3, 6):
            model = SVC(C=c, kernel='poly', degree=deg, gamma='auto')
            model.fit(trainX, trainy)
            results = model.score(testX, testy)
            print('C: {}, Deg: {}'.format(c, deg), results)

    model = GaussianNB()
    model.fit(trainX, trainy)

    #prob = model.predict_proba(testX)
    auc = model.score(testX, testy)
    
    print('NB: ', auc)

def getWord2VecEmbeddings():
    
    model = Word2Vec(sentences=realWinSamples, vector_size=100, window=5, min_count=1, workers=3)
     
    model.save("word2vec.model")

opcodeMapping()
getFakeSamples()
realMWIntVec()
getWord2VecEmbeddings()
#testRunner()
        